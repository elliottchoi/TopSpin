#include <iostream>
#pragma once
template <class T>

class CircularDoublyLinkedList
{
	private: 
	//Node Class with Next and Previous Pointer
	class Node{
	public:
		//Node Constructor 
		Node(T val, Node* nx = NULL, Node* prv = NULL) :Value(val), next(nx), previous(prv)
		{
			if (previous)
			{
				previous->next = this;
			}
			if (next)
			{
				next->previous = this;
			}
		}
		T Value;
		Node*next;
		Node*previous;
	};

	//private member variables
	private:
		Node* m_head;
		Node* m_tail;
		int m_size; 

	public:
		//Construct empty Circular Doubly Linked List
		CircularDoublyLinkedList();
		//Destroy a Circular Doubly Linked List 
		~CircularDoublyLinkedList();
		//Add Item to Front of List
		void addItem(T val);
		//get the head of the linkedList
		inline Node*getHead()const { return m_head; }
		int getSize(){ return m_size; }
};

//Empty Circular Doubly Linked List
template <class T>
CircularDoublyLinkedList<T>::CircularDoublyLinkedList():
	m_head(NULL),
	m_tail(NULL),
	m_size(0)
	{}

//Adding item to tail
template <class T>
void CircularDoublyLinkedList<T>::addItem(T val)
{
	//Empty List, adding first node
	if (m_size == 0)
	{
		m_head = m_tail = new Node(val, NULL, NULL);
	}
	else
	{
		m_tail = new Node(val, m_tail, m_head);
	}
}

